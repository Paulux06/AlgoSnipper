fonction classement( n : entier, InOut tabReponse : Table([1..20] -> chaîne), nbMin : entier ): Table[1..n+1]
début
    tabFin ◄- tabVide();
    adjtab(tabFin, 1, ("-", -1, faux))
    pour i de 1 à n faire
        nom ◄- lire()
        nbP ◄- 0
        pour j de 1 à 20 faire
            val ◄- lire()
            si accesTab(tabReponse, j) = val alors
                nbP ◄- nbP + j
            fsi
        fpour
        obtention ◄- faux
        si nbP >= nbMin alors
            obtention ◄- vrai
        fsi
        res ◄- (nom, nbP, obtention)
        k ◄- 1
        tant que nbP <= accesTab(tabFin, k).nbP faire
            k ◄- k + 1
        ftant
        adjtab(tabFin, i + 1, accestab(tabFin, i))
        pour l décroissant de i-1 à k faire
            chgtab(tabFin, l+1, accestab(tabFin, l))
        fpour
        chgtab(tabFin, k, res)
    fpour
    retourne
fin

lexique:
    Maillon = <val: chaîne, suc: Maillon>
    TabMaillon = tableau Maillon [1..10]
    TabInconnu = tableau <suc: entier, uwu: chaîne> [1..MAX_TAB]
    ListeMaillon = Liste (Maillon)
    ListeInconnu = Liste (<suc: entier, uwu: chaîne>)
    Personne = entier
    TableEntierPersonne = Table(entier -► Personne)
    tabMaillon: TabMaillon
    tabInconnu: TabInconnu
    listeMaillon: ListeMaillon
    listeInconnu: ListeInconnu
    n : entier // commentaire
    tabReponse : TableEntierPersonne // commentaire
	nbMin : entier // commentaire
	tabFin : Inconnu // commentaire
	nom : Inconnu // commentaire
	nbP : entier // commentaire
	val : Inconnu // commentaire
    obtention : booléen // commentaire
    obtention9: booléen // com
	res : Inconnu // commentaire
	k : entier // commentaire